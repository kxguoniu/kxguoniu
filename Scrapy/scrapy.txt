现在 Python 有了易经筋（multiprocessing）, 吸星大法（C 语言扩展机制）和独孤九剑（ctypes）
http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted

请求

请求方法
GET
请求参数包含在URL里面，数据可以在URL中看到，提交请求数据最多可以有1024字节
POST
请求的URL不回显示参数和数据，数据都是通过表单形式传输的，包含在请求体中，没有字节限制

请求网址
统一资源定位符即URL

请求头
Accept：请求报头域，指定客户端可以接受那些类型内容
Accept-Language: 指定客户端可接受的语言类型
Accept-Encoding: 指定客户端可接受的内容编码
Host：用于指定请求资源的主机IP和端口号
Cookie：网站为了辨别用户进行会话跟踪而存储在本地的数据，主要功能就是维持当前会话
Referer: 请求是从那个网页发送过来的，做来源统计，防盗链等
User-Agent: 操作系统及版本、浏览器及版本信息，爬虫时加上。
Content-Type：请求的媒体类型(text/http、image/gif、application/json)

请求体
请求体一般承载的是POST请求中的表单数据，GET请求的请求体为空


响应

响应状态码
1-		消息
2-		成功
3-		重定向
4-		请求错误
5-		服务器错误

响应头
Date：表示响应产生的时间
Last-Modified: 指定资源的最后修改时间
Content-Encoding：指定响应内容的编码
Server：包含服务器信息，比如名称、版本
Content-Type：指定返回的数据类型
Set-Cookie：设置Cookie，下次请求是携带此内容
Expires: 指定相应的过期时间，缓存

响应体
响应的正文数据



URL的识别和分段
urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)
urlstring: 必填，待解析的URL
scheme: 默认的协议，如果URL没有带协议的话
allow_fragments: 是否忽略fragment，如果为False就会被忽略
URL: scheme://netloc/path;params?query#fragment


URL的拼接
urllib.parse.urlunparse
data = ['http', 'www.baidu.com', 'index.html', 'user', 'a=6', 'comment']
urlunparse(date)


urlsplit
urllib.parse.urlsplit()
同urlparse相似  把params合并到path中

urlunsplit()


urljoin
urllib.parse.urljoin('base_url', 'url')
URL拼接,base_url提供了 scheme netloc path,如果这三项在新的链接里不存在就添加上去


urlencode
urllib.parse.urlencode()
把字典序列化为GET请求字典
params = {'name':'xxx', 'age':'22'}
base_url = 'http://www.baidu.com?'
url = base_url + urlencode(params)


parse_qs
urllib.parse.parse_qs()
反序列化GET参数，转换为字典


parse_qsl
反序列化GET参数，转换为元祖组成的列表


quote
该方法可以将内容转化为URL的编码格式，带有中文参数时可能导致乱码



XPath
nodename        选取此节点的所有子节点
/               从当前节点直接选取子节点
//              从当前节点选取子孙节点
.               选取当前节点
..              选取当前节点的父节点
@               选取属性

eg:
//title[@lang='eng']
选择所有名称为title,同时属性lang值为eng的节点

or              或
and             和
mod             计算除法的余数
|               计算两个节点集(并集)
+               加法
-               减法
*               乘法
div             除法
=               等于
!=              不等于
<               小于
<=              小于等于
>               大于
>=              大于等于


ancestor::*     获取所有祖先节点，后面的*可以换成条件
attribute::*    获取所有属性值
child::*        所有直接子节点
descendant::*   子孙节点
following::*    当前节点之后的所有节点
following-sibling:: 当前节点之后的所有同级节点



数据存储
文件存储
TXT
file = open('file.txt', 'a', encoding'utf-8')
r           以只读的方式打开文件，指针会放在开头
rb          以二进制只读方式打开一个文件，指针会放在开头
r+          以读写方式打开一个文件，文件指针将会放在文件开头
rb+         二进制读写方式打开一个文件，指针放在文件的开头
w           已写入方式打开一个文件，如果存在则覆盖，不存在创建
wb          以二进制写入方式打开一个文件，如果文件存在则覆盖，不存在创建
w+          以读写方式打开一个文件，存在则覆盖，不存在则创建
wb+         以二进制读写方式打开一个文件，存在覆盖，不存在创建
a           以追加方式打开一个文件，存在指针放在末尾，不存在创建
ab          以二进制追加打开一个文件
a+          以读写方式打开一个文件，如果文件存在，指针放在末尾，文件打开是追加模式，不存在创建文件读写，
ab+         以二进制追加方式打开一个文件，

文件的简化写法  with as
with 控制块结束时会自动关闭文件