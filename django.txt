字段选项
NULL
避免null在基于字符串的字段上使用，例如Charfield，Textfield。因为空字符串值始终存储为空字符串而不是null

blank
如果为true，该字段允许为空，默认是false
不同于null，null纯粹与数据库相关，而blank与验证相关，如果字段有blank则表单验证允许输入空值

choice
可迭代的(例如元祖或列表)，类似这种[(A, B), (A, B) ...]，一个元素是要在模型上设置的实际值，第二个元素是人类可读的名称。

db_column
用于此字段的数据库列的名称。如果没有给出，Django将使用该字段的名称。

db_index
如果为true将输出该字段的索引

default
字段的默认值。这可以是值或可调用对象。如果可调用，则每次创建新对象时都会调用它.默认值不能是可变对象（模型实例，列表，集等）

primary_key
如果True，此字段是模型的主键.
如果没有primary_key=True为模型中的任何字段指定，Django将自动添加一个AutoField来保存主键，因此primary_key=True除非要覆盖默认的主键行为，否则不需要设置任何字段。
primary_key=True暗示null=False和 unique=True。对象上只允许一个主键
主键字段是只读的。如果更改现有对象上主键的值然后保存它，则将创建一个与旧对象并排的新对象。

unique
如果True，该字段在整个表格中必须是唯一的。
这在数据库级别和模型验证中强制执行。如果您尝试在unique 字段中保存具有重复值, django.db.IntegrityError

unique_for_date
unique_for_month
unique_for_year
字段值唯一的日期

verbose_name
该字段的人类可读名称。如果没有给出详细名称，Django将使用字段的属性名称自动创建它，将下划线转换为空格。


字段类型

AutoField
根据可用ID自动递增。您通常不需要直接使用它; 如果不另行指定，主键字段将自动添加到模型中。

BigIntegerField
一个64位整数
-2^63 - 2^63

BinaryField
用于存储原始二进制数据的字段。它只支持bytes分配。请注意，此字段的功能有限。例如，无法过滤BinaryField值的查询集。

BooleanField
真/假字段。
此字段的默认表单窗口小部件是a CheckboxInput。
如果您需要接受null值，请 NullBooleanField改用。
默认值BooleanField是None当Field.default 没有定义。

CharField
字符串字段，用于小到大的字符串。对于大量文本，请使用TextField。此字段的默认表单窗口小部件是a TextInput。CharField 有一个额外的必要参数：CharField.max_length

CommaSeparatedIntegerField
由逗号分隔的整数字段。如同CharField， max_length参数是必需的，

DateField
DateField.auto_now
每次保存对象时自动将字段设置为现在
DateField.auto_now_add
首次创建对象时自动将字段设置为现在

DateTimeField
同DateField

DecimalField
一个固定精度的十进制数，两个必须参数
DecimalField.max_digits
数字中允许的最大位数。
DecimalField.decimal_places
与数字一起存储的小数位数

EmailField
检查该值是否为有效电子邮件地址

FileField
文件上传字段




模块meta选项
abstract
如果abstract=true 这个模型将会是一个基类

app_label
如果模型定义在标准位置之外，则模型必须定义它所属的程序
app_label="myapp"

db_table
用于模型的数据库表的名称
db_table="misuc_table"

db_tablespace
用于此模型的数据库表空间的名称。默认为项目的DEFAULT_TABLESPACE 设置（如果已设置）。

managed
默认为Tru,如果False，不会对此模型执行数据库表创建或删除操作。

ordering
象的默认顺序，用于获取对象列表时
ordering = ordering = ['-pub_date', 'author'], 先按照pubdate降序然后按照author升序排列

proxy


verbose_name
对象的可读名称，单数  verbose_name = "pizza"

verbose_name_plural
对象的可读名称， 复数  verbose_name_plural = "stories"



添加
b=Blog(id=1, name='xxx')
b.save()
b=Blog.objects.create(id=1, name='xxx')

save()没有返回值 create()返回创建的对象

更新ForeignKey字段的工作方式与保存普通字段的方式完全相同 - 只需将正确类型的对象分配给相关字段即可

更新ManyToManyField工作的方式略有不同 - 使用 add()字段上的方法向关系添加记录


检索对象
all()方法检索所有对象
Blog.objects.all()

filter(**kwargs)
查找与参数匹配的对象
exclude(**kwargs)
查找与参数不匹配的对象

查询是懒惰的，你不输出使用它只是保存并不执行

get()

get精准查询,如果没有查到会引发一个DoesNotExist异常，如果多个项目与get匹配则会引发MultipleObjectsReturned异常

limiting 查询(切片)
Blog.objects.all()[:5]
Blog.objects.all()[5:10]
Blog.objects.all()[:10:2]
查询单个对象而不是列表最好使用索引而不是切片
Blog.objects.all()[0]


字段查找
exact
精准查找
Blog.objects.get(name__exact='xxx')
如果不提供查找类型，则默认是精准查找
name__exact='xxx'   <==>    name='xxx'

iexact
不区分大小写查找

contains
区分大小写的包含查询(LIKE)
Blog.objects.get(name__contains='xxx')  包含xxx的名称

icontains
不区分大小写的包含查询

startswith,endswith,istartseith,iendswith
开始和结尾匹配查询


跨越关系查找
Entry.objects.filter(blog__name='xxx')
查找Entry中关联表blog的name='xxx'的记录
Blog.objects.filter(entry__headline__contains='Lennon')
反向查找，查找blog表被关联在表entry中headline包含'Lennon'的blog


比较查询  F
Entry.objects.filter(n_comments__gt=F('n_pingbacks'))
Entry.objects.filter(n_comments__gt=F('n_pingbacks') * 2)
Entry.objects.filter(rating__lt=F('n_comments') + F('n_pingbacks'))
查找关联表authors和blog的name相同的数据
Entry.objects.filter(authors__name=F('blog__name'))


复杂对象查找  Q
Q(question__startswith='Who') | ~Q(pub_date__year=2005)
Poll.objects.get(Q(question__startswith='Who'), Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)))
Poll.objects.get(Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)), question__startswith='Who')


删除对象
delete()


更新对象
update(),返回更新的行数
更新时 F()查询不能引入其他表


向后查询
b = Blog.objects.get(id=1)
b.entry_set.filter(headline__contains='Lennon')
向后查询关联表的，与之关联的对象



查询集（查询方法）

过滤
filter(**kwargs)
返回给定查找参数匹配的新对象,多个参数通过AND底层SQL语句连接起来

排除
exclude(**kwargs)
返回给定查找参数不匹配的新对象，多个参数通过AND底层SQL语句连接，整个事件都包含在一个NOT()中
select ... WHERE NOT ()

注释
annotate（*args，**kwargs）

排序
order_by(*fields)
desc()

反转
reverse()
使用此reverse()方法可以反转返回查询集元素的顺序。reverse()第二次调用会将排序恢复到正常方向。

去重复
distinct(*fields)

值
values(*fields)
Blog.objects.values('id')

值列表
values_list(*fields, flat=False)
这类似于values()除了返回字典之外，它在迭代时返回元组.
如果只传入单个字段，也可以传入flat 参数。如果True，这将意味着返回的结果是单个值
flat当存在多个字段时传入是错误的

日期
dates(fields, kind, order='ASC')
kind  应该是 year、month、day
order 默认 ASC ，DESC
Blog.objects.dates('pub_date', 'year')

日期时间
datetimes(field_name, kind, order='ASC', tzinfo=None)
field_name应该是DateTimeField您的模型的名称。
kind应该是"year"，"month"，"day"，"hour"， "minute"或"second"
tzinfo定义截断前转换日期时间的时区。实际上，给定的日期时间根据使用的时区具有不同的表示。此参数必须是datetime.tzinfo 对象。如果是None，Django使用当前时区。

全部
all()

关联查找
select_related
e = Entry.objects.select_related('blog').get(id=5)

特殊查询
extra（select = None，where = None，params = None，tables = None，order_by = None，select_params = None)


得到
get(**kwargs)
返回给定查找参数匹配的对象

创建
create(**kwargs)
一种创建对象并将其全部保存在一个步骤中的便捷方法,返回创建对象

获取或创建
get_or_create(defaults=None, **kwargs)

升级或创建
update_or_create(defaults=None, **kwargs)

大量插入
bulk_create(objs，batch_size = None)
Entry.objects.bulk_create(Entry(headline="Django 1.1 Announced"),Entry(headline="Breaking: Django is awesome")])
它不适用于多对多关系
它不适用于多表继承方案中的子模型
如果模型的主键是a，AutoField则它不会检索并设置主键属性

计数
count()
返回一个整数，表示与之匹配的数据库中的对象数,永远不会引发异常

in_bulk
in_bulk(id_list)
获取主键值列表并返回将每个主键值映射到具有给定ID的对象实例的字典

迭代器
iterator()
查询结果并返回一个迭代器

最新的
latest(field_name=None)
使用field_name 提供的日期字段，按日期返回表中的最新对象

最早的
earliest(field_name=None)

第一个
first()
返回查询集匹配的第一个对象，或者None没有匹配的对象

最后
last()

存在
exists()
some_queryset.filter(pk=entry.pk).exists()

更新
update(**kwargs)
返回更新的行数

删除
delete()


字段查找
__exact		确切
__iexact	不区分大小写
__contains 	包含(%**%)
__icontains 不区分大小写的包含
__in 		在
__gt		大于
__gte		大于等于
__lt		小于
__lte		小于等于
__startswitch	区分大小写的开头
__istartswitch 	不区分大小写的开头
__endswitch		区分大小写的结尾
__iendseitch 	不区分大小写的结尾
__range			范围(pub_date__range=(start_date, end_date))
__year
__month
__date
__week_day		周(日-六)
__hour
__minute
__second
__isnull
__search		搜索
__regex			正则表达式匹配
__iregex		不区分大小写的正则表达式
	



访问相关对象

add(*objs)	反向添加
b = Blog.objects.get(id=1)
e = Entry.objects.get(id=234)
b.entry_set.add(e)

create(**kwargs)	正向添加
b = Blog.objects.get(id=1)
e = b.entry_set.create(
	headline='Hello',
	body_text='Hi',
	pub_date=datetime.date(2005, 1, 1))

remove(*objs)	反向移除
b = Blog.objects.get(id=1)
e = Entry.objects.get(id=234)
b.entry_set.remove(e)

clear()		正向移除
b = Blog.objects.get(id=1)
b.entry_set.clear()



迁移
migrate，负责应用迁移，以及取消应用和列出其状态。
makemigrations，负责根据您对模型所做的更改创建新的迁移。
sqlmigrate，显示迁移的SQL语句。





视图

请求和响应对象
HttpRequest 属性
.scheme
表示请求方案的字符串		(http/https)

.body
原始HTTP请求主体作为字节字符串

.path
表示所请求页面的完整路径的字符串，不包括scheme和域名

.path_info
在某些Web服务器配置下，主机名后面的URL部分被分成脚本前缀部分和路径信息部分
例如，如果WSGIScriptAlias你的应用程序设置为 "/minfo"，则path可能是"/minfo/music/bands/the_beatles/" 和path_info会"/music/bands/the_beatles/"。

.method
请求中使用的HTTP方法的字符串  (GET/POST)

.encoding
对数据进行编码转换，设定访问编码

.GET
类似于字典的对象，包含所有给定的HTTP GET参数

.POST
类似字典的对象，包含所有给定的HTTP POST参数

.COOKIES
包含所有cookie的标准Python字典。键和值是字符串。

.FILES
包含所有上传文件的类字典对象
<input type="file" name="" />

.META
包含所有可用HTTP标头的标准Python字典
CONTENT_LENGTH - 请求正文的长度（作为字符串）。
CONTENT_TYPE - 请求正文的MIME类型。
HTTP_ACCEPT - 响应的可接受内容类型。
HTTP_ACCEPT_ENCODING - 可接受的响应编码。
HTTP_ACCEPT_LANGUAGE - 响应的可接受语言。
HTTP_HOST - 客户端发送的HTTP主机头。
HTTP_REFERER - 引用页面，如果有的话。
HTTP_USER_AGENT - 客户端的用户代理字符串。
QUERY_STRING - 查询字符串，作为单个（未解析的）字符串。
REMOTE_ADDR - 客户端的IP地址。
REMOTE_HOST - 客户端的主机名。
REMOTE_USER - Web服务器验证的用户（如果有）。
REQUEST_METHOD- 一个字符串，如"GET"或"POST"。
SERVER_NAME - 服务器的主机名。
SERVER_PORT - 服务器的端口（作为字符串）。

.urlconf


中间件设置的属性
.session
来自SessionMiddleware：一个可读写的，类似字典的对象，代表当前会话

.site
来自CurrentSiteMiddleware： 表示当前站点返回的实例Site或 RequestSite返回 的实例

.user
表示当前登录用户的实例。如果用户当前未登录，user则将设置为实例AnonymousUser


方法
.get_host()
按顺序返回请求的原始主机

.get_full_path()
path如果适用，返回加上附加的查询字符串

.build_absolute_uri(location)
返回绝对URI形式的location

.get_signed_cookie(key, default=RAISE_ERROR, salt='', max_age=None)
返回已签名cookie的cookie值，如果cookie失效则引发异常，如果提供default参数则禁止异常并返回默认值
可选salt参数可用于提供额外保护，防止对您的密钥进行暴力攻击。如果提供，max_age将根据附加到cookie值的签名时间戳检查参数， 以确保cookie不超过 max_age秒,就是cookie的加密和有效时间

.is_secure()
如果请求是安全的则返回True，也就是说他是用https请求的

.is_ajax()
如果请求被经由制成XMLHttpRequest返回True，就是javascript

.read(size=None)
.readline()
.readlines()
.xreadlines()
.__iter__()



查询字典对象
QueryDict

方法
.__getitem__(key)
返回给定键的值，如果有多个值则返回最后一个(KeyError)

.__setitem(ket, value)
将给定键的值设置为value

.__contains__(key)
如果设置了给定键则返回True

.get(key, default=None)
与__gititem__相同的逻辑，如果键不存在，使用钩子返回默认值

.setdefault(key, default=None)
设置默认值

.update(other_dict)
添加到字典而不是替换

.items()
参考__gititem__()

.iteritems()

.iterlists()

.values()

.itervalues()

.copy()
使用copy.deepcopy()返回对象的副本，这个副本是可变的

.getlist(key, default=None)
以python列表的方式返回带有请求键的数据

.setlist(key,list_)
讲给定键设置为list_ 与(__setitem__)不同

.appendlist(key, item)
讲item追加到与key关联的内部列表

.setlistdefault(key, default_list=None)
like setdefault() 只不过传值是列表

.lists()
like items() 不过它返回字典的所有值

.pop(key)
返回给定键的值列表，并从字典中删除

.popitem()
删除字典的任意成员，并返回包含键和值列表的一个元祖

.dict()
返回查询字典的字典形式，多个值的键只返回最后一个值

.urlencode(safe=None)
以query_string的方式返回数据的字符串



HttpResponse对象

用法
传递字符串
典型用法是将页面内容作为字符串传递给 HttpResponse构造函数
response = HttpResponse("Text only, please.", content_type="text/plain")
但是，如果要以增量方式添加内容，可以将其response用作类文件对象
response = HttpResponse()
response.write("<p>Here's the text of the Web page.</p>")
response.write("<p>Here's another paragraph.</p>")


传递迭代器
最后，您可以传递HttpResponse迭代器而不是字符串


设置标题字段
要在响应中设置或删除标题字段，请将其视为字典
response = HttpResponse()
response['Age'] = 120
del response['Age']


告诉浏览器将响应视为文件附件
要告诉浏览器将响应视为文件附件，请使用 content_type参数并设置Content-Disposition标头
response = HttpResponse(my_data, content_type='application/vnd.ms-excel')
response['Content-Disposition'] = 'attachment; filename="foo.xls"'


属性
.content
表示内容的字节字符串，必要时从Unicode对象编码

.charset
一个字符串，表示将在其中编码响应的字符集。如果未在HttpResponse实例化时间给出，则将从中提取 content_type，如果不成功，DEFAULT_CHARSET则将使用该 设置

.status_code
响应的HTTP状态代码

.reason_phrase
响应的HTTP原因短语

.streaming

.closed
如果回复以结束，则为True


方法
HttpResponse.__init__（content =''，content_type = None，status = 200，reason = None，charset = None）
content应该是迭代器或字符串
content_type是可选的字符集编码完成的MIME类型，用于填充HTTP Content-Type标头。默认“ text / html; charset = utf-8 “
status是响应的HTTP状态代码
reason是HTTP响应短语。如果未提供，将使用默认短语
charset是编码响应的字符集


.__setitem__(header, value)
将给定的标题名称设置定为给定值

.__delitem__(header)
删除具有给定标题的标头，不区分大小写

.__getitem__(header)
返回给定标头名称的值，不区分大小写

.has_header(header)
对给定名称的标头的不区分大小写的检查

.setdefault(header, value)
设置一个标题，除非已经设置好了

.set_cookie(key，value =''，max_age = None，expires = None，path ='/'，domain = None，secure = None，httponly = False)
max_age 过期秒数
expires 过期时间 "Wdy, DD-Mon-YY HH:MM:SS GMT" or a datetime.datetime
使用domain，如果你想设置一个跨域的cookie
httponly=True 防止客户端的javascrapt访问cookie

.set_signed_cookie（key，value，salt =''，max_age = None，expires = None，path ='/'，domain = None，secure = None，httponly = True）
like set_cookie(),对cookie进行加密签名

.delete_cookie(key，path ='/'，domain = None)
使用给定的秘钥删除cookie

.write(content)
此方法使HttpResponse实例成为类文件对象

.flush()
此方法使HttpResponse实例成为类文件对象

.tell()
此方法使HttpResponse实例成为类文件对象

.getvalue()
返回值HttpResponse.content,此方法使HttpResponse实例成为类似流的对象

.writable()
此方法使HttpResponse实例成为类似流的对象

.writelines(line)
将响应列表写入响应。不添加行分隔符。此方法使HttpResponse实例成为类似流的对象



HttpResponse子类

HttpResponseRedirect	url参数必须  暂时重定向(302) 返回定向的url

HttpResponsePermanentRedirect	返回永久重定向(301)

HttpResponseNotModified
构造函数不接受任何参数，也不应将任何内容添加到此响应中。使用此命令指定自用户上次请求以来未修改页面(304)

HttpResponseBadRequest
like HttpResponse 但使用400状态码

HttpResponseNotFound
like HttpResponse 但使用404状态码

HttpResponseForbidden
like HttpResponse 但使用403状态码

HttpResponseNotAllowed
like HttpResponse 但使用405状态码，构造函数的第一个参数是必需的：允许的方法列表（例如 ）。['GET', 'POST']

HttpResponseGone
like HttpResponse 但使用410状态码

HttpResponseServerError
like HttpResponse 但使用500状态码



JsonResponse对象
JsonResponse（data，encoder = DjangoJSONEncoder，safe = True，** kwargs）
其默认Content-Type标头设置为application/json
第一个参数data应该是一个dict实例。如果 safe参数设置为False（见下文），则它可以是任何JSON可序列化对象。
encoder，缺省值为 django.core.serializers.json.DjangoJSONEncoder，将用于序列化的数据
该safe布尔参数默认为True。如果设置为 False，则可以传递任何对象以进行序列化（否则仅 dict允许实例）

用法
要序列化除dict以外的对象，必须将safe 参数设置为False
如果需要使用其他JSON编码器类，可以将encoder 参数传递给构造函数方法



StreamingHttpResponse对象
属性
.streaming_content
表示内容的字符串迭代器

.status_code
响应的HTTP状态代码

.reason_phrase
响应的HTTP原因短语

.streaming
一直是 True



TemplateResponse

SimpleTemplateResponse对象
.template_name
要呈现的模板的名称

.context_data
渲染模板时使用的上下文数据。它必须是一个dict

.rendered_content
使用当前模板和上下数据呈现的响应内容值

.is_rendered
一个布尔值，指示是否已显现响应内容


方法
SimpleTemplateResponse.__init__（template，context = None，content_type = None，status = None，charset = None，using = None)
使用给定模板，上下文，内容类型，HTTP状态和字符集实例化对象
template 依赖于后端的模板对象，模板名称或模板名称列表， 1.8开始不推荐使用
context  dict要添加到模板上下文的值的  1.8开始不推荐使用
content_type HTTP Content-Type标头中包含的值 包括MIME类型规范和字符集编码
status 响应的HTTP状态代码
charset 将对响应进行编码的字符集
using 该NAME模板引擎的使用加载的模板

.resolve_template(template)
解析用于渲染的模板实例,接受依赖于后端的模板对象,模板名称或模板名称列表
返回要呈现的后端依赖模板对象实例。重写此方法以自定义模板加载

.render()
设置response.content为获得的结果 SimpleTemplateResponse.rendered_content


TemplateResponse对象
方法
TemplateResponse.__init__（request，template，context = None，content_type = None，status = None，current_app = None，charset = None，using = None）
TemplateResponse使用给定的请求，模板，上下文，内容类型，HTTP状态和字符集实例化对象
request  一个HttpRequest实例
template 依赖于后端的模板对象，模板名称或模板名称列表， 1.8开始不推荐使用
context  dict要添加到模板上下文的值的  1.8开始不推荐使用
content_type  HTTP Content-Type标头中包含的值，包括MIME类型规范和字符集编码
status  响应的HTTP状态代码
charset  将对响应进行编码的字符集
using  该NAME模板引擎的使用加载的模板



文件上传
文件对象
属性
name  文件名包括相对路径
size  文件的大小
file  此类包装的基础文件对象
mode  文件的读/写模式

方法
open(mode=None)
打开或重新打开文件 重新打开文件时，mode将覆盖最初打开文件的任何模式; None表示以原始模式重新打开

read(num_bytes=None)
从文件中读取内容，可选的size是要读取的字节数，如果未指定则将文件读取到最后

__iter__()
迭代文件，一次一行

chunks(chunk_size=None)
迭代文件，产生给定大小的'块'，默认是64KB。这对于非常大的文件特别有用，因为它允许它们从磁盘流式传输并避免将整个文件存储在内存中

multiple_chunks(chunk_size=None)
如果文件足够大，需要多个块来访问它的所有内容，那么返回True

write(content)
将指定内容字符串写入文件，根据幕后的存储系统，在close()调用文件之前，可能无法完全提交此内容

close()
关闭文件


ContentFile Class

django.core.files.images.ImageFile Class
继承了文件的所有属性和方法，并增加了新的内容
width 图像的宽度
height 图像的高度

附加方法
File.save（name，content，save = True）
使用提供的文件名和内容保存新文件。这不会替换现有文件，但会创建一个新文件并更新对象以指向它

File.delete（save = True）
从模型实例中删除文件并删除基础文件。如果save是True，则删除文件后将调用模型的save()方法



文件存储

FileSystemStorage Class
class FileSystemStorage(location=None, base_url=None, file_permissions_mode=None, directory_permissions_mode=None)
location    保存文件的目录的绝对路径，默认为您的MEDIA_ROOT设置值
base_url    提供存储在此位置的文件的URL，默认为您的MEDIA_URL设置值
file_permissions_mode   保存文件是文件系统的权限，默认为FILE_UPLOAD_PERMISSIONS
directory_permissions_mode  保存目录时的文件系统权限，默认为FILE_UPLOAD_DIRECTORY_PERMISSIONS


Storage Class
accessed_time(name)
返回上次访问时间，对于无法返回上次访问时间的存储系统，这将会引发 NotImplementedError

created_time(name)
返回文件的创建时间，异常同上

delete(name)
删除文件name，如果存储系统不支持删除，异常同上

exists(name)
如果文件已存在返回True，不存在返回False

get_available_name(name, max_length=None)
返回一个文件名，如果max_length设置，则长度不能超过该值

get_valid_name(name)
返回一个文件名

listdir(path)
返回指定路径的内容，这是一个二元祖列表，第一项是目录，第二项是文件,异常同上

modified_time(name)
返回一个最后修改时间的datetime对象, 异常同上

open(name, mod='rb')
打开给定的文件name，虽然返回的是一个file对象，但是它可能是一个子类，在远程服务存储的情况下，读写可能非常慢

path(name)
本地文件系统的路径

save(name, content, max_length=None)
保存新文件，如果名称已存在则会修改文件名，返回实际存储的文件名
max_length被传递给了get_available_name()
content 必须是一个文件对象

size(name)
返回引用文件的总大小(以字节为单位)，异常同上

url(name)
如果内容可以被访问则返回url，异常同上




表格
使用表单
